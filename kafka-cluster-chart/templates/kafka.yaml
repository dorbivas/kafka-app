apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: "kafka"
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
      - name: init-log-config
        image: busybox
        command: ['sh', '-c', 'cat /opt/bitnami/kafka/config/server.properties; sleep 10'] 
        volumeMounts:
        - name: kafka-config
          mountPath: /opt/bitnami/kafka/config/server.properties
          subPath: server.properties
      containers:
      - name: kafka
        image: "bitnami/kafka:latest"
        ports:
        - name: kafka
          containerPort: 9092
        env:
        - name: KAFKA_CFG_BROKER_ID
          value: "{{ .Values.kafkaConfig.brokerId }}"
        - name: KAFKA_CFG_LOG_DIRS
          value: "{{ .Values.kafkaConfig.logDirs }}"
        - name: KAFKA_CFG_LISTENERS
          value: "{{ .Values.kafkaConfig.listeners }}"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "{{ .Values.kafkaConfig.advertisedListeners }}"
        - name: KAFKA_CFG_PROCESS_ROLES
          value: "{{ .Values.kafkaConfig.processRoles }}"
        - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
          value: "{{ .Values.kafkaConfig.controllerQuorumVoters }}"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: "{{ .Values.kafkaConfig.zookeeperConnect }}"
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "{{ .Values.kafkaConfig.autoCreateTopicsEnable }}"
        volumeMounts:
        - name: kafka-config
          mountPath: /opt/bitnami/kafka/config/server.properties
          subPath: server.properties
        - name: data
          mountPath: /var/lib/kafka/data
      volumes:
      - name: kafka-config
        configMap:
          name: kafka-config
      - name: data
        emptyDir: {}